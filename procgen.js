// Generated by CoffeeScript 1.10.0
var canvasImage, canvasUI, chance, clear, contextImage, contextUI, drawCircle, drawLine, generate, generating, height, inCircle, int, maxTracedPoints, now, pick, pointOnLine, points, pointsSize, startGenerating, stopGenerating, time, tracedPoints, tracedPointsPerFrame, tracedPointsSize, tracepoint, width;

console.log("boom shakalaka");

Array.prototype.remove = function(element) {
  var index;
  index = this.indexOf(element);
  if (index !== -1) {
    return this.splice(index, 1);
  }
};

points = [];

tracepoint = void 0;

generating = false;

now = void 0;

tracedPoints = 0;

maxTracedPoints = 500000;

tracedPointsPerFrame = 10000;

pointsSize = 5;

tracedPointsSize = 0.1;

width = function() {
  return window.innerWidth;
};

height = function() {
  return window.innerHeight;
};

time = function() {
  return (new Date()).getTime();
};

canvasImage = document.createElement('canvas');

contextImage = canvasImage.getContext('2d');

canvasImage.width = width();

canvasImage.height = height();

document.body.appendChild(canvasImage);

canvasUI = document.createElement('canvas');

contextUI = canvasUI.getContext('2d');

canvasUI.width = width();

canvasUI.height = height();

document.body.appendChild(canvasUI);

contextImage.fillStyle = "hsla(0, 100%, 0%, 0.2)";

contextImage.fillRect(0, 0, width(), 100);

contextImage.fillStyle = "hsl(0, 100%, 00%)";

contextImage.font = "24px Arial";

contextImage.fillText("Place at least 3 points with by left clicking anywhere", 10, 50);

contextImage.fillText("Then right click to place the starting point to start a generation", 10, 80);

canvasUI.onclick = function(event) {
  if (generating) {
    return;
  }
  contextImage.fillStyle = "hsl(100, 100%, 50%)";
  drawCircle(contextImage, event.offsetX, event.offsetY, pointsSize);
  return points.push({
    x: event.offsetX,
    y: event.offsetY
  });
};

canvasUI.oncontextmenu = function(event) {
  if (generating) {
    return false;
  }
  if (points.length <= 2) {
    return false;
  }
  contextImage.fillStyle = "hsl(200, 100%, 30%)";
  drawCircle(contextImage, event.offsetX, event.offsetY, pointsSize);
  tracepoint = {
    x: event.offsetX,
    y: event.offsetY
  };
  startGenerating();
  return false;
};

drawCircle = function(context, x, y, r) {
  context.beginPath();
  context.arc(x, y, r, 0, 2 * Math.PI, true);
  return context.fill();
};

drawLine = function(context, p1, p2) {
  context.beginPath();
  context.moveTo(p1.x, p1.y);
  context.lineTo(p2.x, p2.y);
  return context.stroke();
};

clear = function(context) {
  return context.clearRect(0, 0, width(), height());
};

pointOnLine = function(p1, p2, t) {
  return {
    x: p1.x + (p2.x - p1.x) * t,
    y: p1.y + (p2.y - p1.y) * t
  };
};

startGenerating = function() {
  contextUI.fillStyle = "hsl(0, 100%, 90%)";
  contextUI.fillRect(0, 0, width(), 100);
  contextUI.fillStyle = "hsl(0, 100%, 50%)";
  contextUI.fillText("Generating", width() / 2, 50);
  now = time();
  generating = true;
  return generate();
};

stopGenerating = function() {
  clear(contextUI);
  points = [];
  tracepoint = void 0;
  generating = false;
  now = void 0;
  tracedPoints = 0;
  return console.log("done");
};

generate = function() {
  var _now, difference, i, j, ref;
  _now = time();
  difference = _now - now;
  if (tracedPoints === 0 || difference >= 0 || true) {
    now = _now;
    for (i = j = 0, ref = tracedPointsPerFrame; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      tracedPoints++;
      tracepoint = pointOnLine(pick(points), tracepoint, 0.5);
      contextImage.fillStyle = "hsl(200, 100%, 50%)";
      drawCircle(contextImage, tracepoint.x, tracepoint.y, tracedPointsSize);
    }
    console.log("generating", 100 * tracedPoints / maxTracedPoints, "%");
    if (tracedPoints >= maxTracedPoints) {
      stopGenerating();
      return;
    }
  }
  if (generating) {
    return window.requestAnimationFrame(generate);
  }
};

int = function(max, min) {
  if (max == null) {
    max = 1;
  }
  if (min == null) {
    min = 0;
  }
  return Math.floor(min + Math.random() * (max + 1 - min));
};

chance = function(percentage) {
  return Math.random() * 100 < percentage;
};

pick = function(list) {
  return list[int(list.length - 1)];
};

inCircle = function(radius) {
  var a, b, ratio, swap;
  a = Math.random();
  b = Math.random();
  if (b < a) {
    swap = b;
    b = a;
    a = swap;
  }
  ratio = a === 0 ? 0 : 2 * Math.PI * a / b;
  return {
    x: b * radius * Math.cos(ratio),
    y: b * radius * Math.sin(ratio)
  };
};

//# sourceMappingURL=procgen.js.map
